#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_SIZE 1024

/* Fonction pour découper une chaîne en arguments */
void tokenize(char *string, char *delim, char **arguments, int *count) {
    char *token = strtok(string, delim);
    *count = 0;
    while (token != NULL) {
        arguments[*count] = strdup(token);
        (*count)++;
        token = strtok(NULL, delim);
    }
    arguments[*count] = NULL; /* Terminer le tableau avec NULL */
}

/* Fonction pour libérer la mémoire allouée pour les arguments */
void free_arguments(char **arguments, int count) {
    int i;
    for (i = 0; i < count; i++) {
        free(arguments[i]);
    }
}

int main(int argc, char **argv) {
    /*char cwd[MAX_SIZE];*/
    /*char hostname[MAX_SIZE];*/
    char string[MAX_SIZE];
    char *delim = " ";
    char *arguments[MAX_SIZE];
    int count;  
    pid_t pid;
    int i;
    char *path_arguments[MAX_SIZE];
    char full_path[MAX_SIZE];

    if (argc < 2) {
        /* Mode interactif */
        while (1) {
            /*getcwd(cwd, sizeof(cwd));
            gethostname(hostname, sizeof(hostname));
            pas demandé, pour modif prompt
            */
            printf("($)");

            /* Lire la commande */
            if (!fgets(string, sizeof(string), stdin)) {  /* erreur fgetserr surement dû au fait qu'il faut rajouter un test, à vous de voir si vous voulez faire char par char  */
                printf("fgetserr");
                return 0;
            }

            /* Supprimer le retour à la ligne */
            string[strcspn(string, "\n")] = 0;

            /* Vérifier si la commande est "exit" */
            if (strcmp(string, "exit") == 0) {
                break;
            }

            /* Découper la commande en arguments */
            tokenize(string, delim, arguments, &count);

            /* Vérifier si la commande est une commande intégrée */
            if (strcmp(arguments[0], "cd") == 0) {
                /* Changer de répertoire */
                if (chdir(arguments[1]) != 0) {
                    perror("chdirerr");
                }
                continue; /* Passer au prochain tour de boucle */
            }

            /* Créer un processus pour exécuter la commande */
            pid = fork();
            if (pid < 0) {
                perror("fork a échoué");
                exit(EXIT_FAILURE);
            } else if (pid == 0) {  /* Processus enfant */
                /* Obtenir la variable d'environnement PATH */
                char *path = getenv("PATH");
                if (path == NULL) {
                    perror("getenverr");
                    exit(EXIT_FAILURE);
                }

                /* Découper la variable PATH en arguments */
                tokenize(path, ":", path_arguments, &count);

                /* Parcourir chaque répertoire de PATH pour trouver l'exécutable */
                for (i = 0; i < count; i++) {
                    /* Construire le chemin complet vers l'exécutable */
                    snprintf(full_path, sizeof(full_path), "%s/%s", path_arguments[i], arguments[0]);

                    /* Exécuter la commande */
                    execve(full_path, arguments, NULL);
                }

                /* Si la boucle se termine, l'exécutable n'a pas été trouvé */
                printf("Commande introuvable : %s\n", arguments[0]);
                exit(EXIT_FAILURE);
            } else {  /* Processus parent */
                wait(NULL); /* Attendre que le processus enfant se termine */
            }

            /* Libérer la mémoire allouée pour les arguments */
            free_arguments(arguments, count);
        }
    } else {
        /* Mode non interactif */
        /* Concaténer les arguments de la ligne de commande en une seule chaîne */
        strcpy(string, argv[1]);
        for (i = 2; i < argc; i++) {
            strcat(string, " ");
            strcat(string, argv[i]);
        }

        /* Découper la commande en arguments */
        tokenize(string, delim, arguments, &count);

        /* Créer un processus pour exécuter la commande */
        pid = fork();
        if (pid < 0) {
            perror("fork a échoué");
            exit(EXIT_FAILURE);
        } else if (pid == 0) {  /* Processus enfant */
            execve(arguments[0], arguments, NULL);
            perror("execve a échoué"); /* Cette ligne ne devrait pas être atteinte si execve réussit */
            exit(EXIT_FAILURE);
        } else {  /* Processus parent */
            wait(NULL); /* Attendre que le processus enfant se termine */
        }

        /* Libérer la mémoire allouée pour les arguments */
        free_arguments(arguments, count);
    }
    return 0;
}
